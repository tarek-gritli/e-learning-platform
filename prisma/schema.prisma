// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  KICKED
  PENDING
}

enum MaterialType {
  PDF
}

model User {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  username              String    @unique
  firstName             String
  lastName              String
  password              String
  avatar                String?
  bio                   String?
  role                  Role      @default(STUDENT)
  verifyToken           String?
  verifyTokenExpires    DateTime?
  isVerified            Boolean   @default(false)
  resetPassToken        String?
  resetPassTokenExpires DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  createdCourses   Course[]     @relation("InstructorCourses")
  enrollments      Enrollment[]
  sentMessages     Message[]        @relation("MessageSender")
  receivedMessages Message[]        @relation("MessageReceiver")
  courseMessages   CourseMessage[]
  @@map("users")
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  instructorId Int
  instructor   User             @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  materials    CourseMaterial[]
  enrollments  Enrollment[]
  conversation CourseConversation?

  @@map("courses")
}

model CourseMaterial {
  id        Int          @id @default(autoincrement())
  title     String
  type      MaterialType
  fileUrl   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_materials")
}

model Enrollment {
  id          Int              @id @default(autoincrement())
  status      EnrollmentStatus @default(ACTIVE)
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?

  studentId Int
  courseId  Int
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Message {
  id      Int      @id @default(autoincrement())
  content String
  isRead  Boolean  @default(false)
  sentAt  DateTime @default(now())

  senderId   Int
  receiverId Int
  sender     User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CourseConversation {
  id        Int             @id @default(autoincrement())
  courseId  Int             @unique
  course    Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  messages  CourseMessage[]

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("course_conversations")
}

model CourseMessage {
  id             Int       @id @default(autoincrement())
  text           String
  timestamp      DateTime  @default(now())

  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId Int
  conversation   CourseConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  reactions      Json      @default("{}") // Can be adapted to a separate table if you want fine-grained control
  comments       Json      @default("[]") // Same here

  @@map("course_messages")
}